---
title: "Peru_P1_Week3Lab"
author: "Jiang Weimin, "
date: today
format:
  html:
    toc: true
    toc-depth: 2
---

# 1 Visualizing the Distribution of Quantitative Data: Bill Lengths of Pygoscelis Penguins
 
```{r}
#| label: setup
#| include: false

# Install any CRAN packages we’ll need, quietly
needed <- c("tidyverse", "palmerpenguins", "ggbeeswarm")
for (pkg in needed) {
  if (!requireNamespace(pkg, quietly = TRUE)) {
    install.packages(pkg)
  }
}

# load the only packages you'll need for this lab
library(tidyverse)
library(palmerpenguins)
```

## 1.1 Remove Missing Values

Penguins with an `NA` in `bill_length_mm` will cause ggplot2 warnings later on.  
We’ll:

1. Count how many rows have missing bill lengths.  
2. Remove those rows with `drop_na()`.  
3. Verify that no `NA` values remain.

```{r}
#| label: remove-missing

# Step 1: count rows with missing bill length
penguins %>%
  filter(is.na(bill_length_mm)) %>%
  count(name = "n_missing")

# Step 2: remove them
penguins_clean <- penguins %>%
  drop_na(bill_length_mm)

# Step 3: verify zero missing remain
penguins_clean %>%
  summarise(
    total_rows   = n(),
    n_missing    = sum(is.na(bill_length_mm))
  )
```


### Preview the Original Penguins Data

Before dropping any rows, let’s look at the first few records and get a sense of how many bill-lengths are missing:
```{r}
#| label: preview-original
# Show the first six rows of the raw penguins tibble
head(penguins)
penguins
# Summarize total rows and how many have missing bill_length_mm
penguins %>%
  summarise(
    total_rows = n(),
    missing_bill_length = sum(is.na(bill_length_mm))
  )
```

## 1.2 Scatter Plot of Species versus Bill Length

Here we map bill length to the x-axis and species to the y-axis.  
We customize axis labels, add a title, and include the requested source citation.

```{r}
#| label: scatter-species-bill-length
#| message: false

penguins_clean %>%
  ggplot(aes(
    x = bill_length_mm,
    y = species
  )) +
  geom_point() +
  labs(
    x       = "Bill Length (mm)",
    y       = "Penguin Species",
    title   = "Bill Length by Penguin Species",
    caption = "Source: Gorman et al. (2014)"
  )
```
## 1.3 Why Should You Jitter the Plot?

We noticed in the plain scatter that tons of points land on the same spot—many penguins of the same species have identical bill lengths. Let’s prove it:

```{r}
#| label: why-jitter
#| message: false

penguins_clean %>%
  count(species, bill_length_mm) %>%
  filter(n > 1) %>%
  arrange(desc(n))
```
That returns an 84×3 table showing all duplicate locations (e.g. 7 Adelies at 41.1 mm, 5 at 37.8 mm, etc.).

To see how many unique coordinate pairs there actually are, compare to the total distinct combinations:

```{r}
penguins_clean %>%
  distinct(species, bill_length_mm) %>%
  count()
```

Here you’ll get distinct_pairs = 208 out of 342 rows, confirming that 134 measurements overlap. Those overlaps are exactly why a plain geom_point() hides the true number of penguins—jittering will spread them out so we can see each one.

## 1.4 Jitter Plot

To reveal all individual measurements without changing their exact bill‐length, we’ll add only vertical jitter (so that points don’t overlap within each species strip) and make the points semi-transparent. Here’s the setup:

```{r}
#| label: jitter-plot
#| message: false

penguins_clean %>%
  ggplot(aes(
    x = bill_length_mm,
    y = species
  )) +
  geom_jitter(
    width  = 0, # no horizontal jitter
    height = 0.1, # small vertical jitter so clusters stay distinct
    alpha  = 0.5 # semi-transparent points to show overplotting density
  ) +
  labs(
    x       = "Bill Length (mm)",
    y       = "Penguin Species",
    title   = "Jitter Plot of Bill Length by Species",
    caption = "Source: Gorman et al. (2014)"
  )
```
What you should see:

Points spread gently up and down around each species line so you can count every observation.

Reduced opacity (α = 0.5) highlights areas where many penguins share the same bill length.


### 1.5 Pre-requiste: Install ggbeeswarm (only needs to run once)

```{r}
#| label: install-beeswarm
#| include: false
if (!requireNamespace("ggbeeswarm", quietly = TRUE)) {
  install.packages("ggbeeswarm")
}
```

## 1.5 Bee-Swarm Plot

A bee-swarm plot arranges points in a compact “swarm,” preserving each exact bill-length on the x-axis but avoiding overlap by stacking them along the y-direction. We’ll use geom_beeswarm() from the ggbeeswarm package.

```{r}
#| label: bee-swarm
#| message: false

# load the ggbeeswarm package for geom_beeswarm()
library(ggbeeswarm)

penguins_clean %>%
  ggplot(aes(
    x = bill_length_mm,
    y = species
  )) +
  geom_beeswarm(
    size  = 1.8, # medium point size
    alpha = 0.7, # slightly transparent
    color = "steelblue"
  ) +
  labs(
    x       = "Bill Length (mm)",
    y       = "Penguin Species",
    title   = "Bee-Swarm Distribution of Penguin Bill Lengths",
    caption = "Source: Gorman et al. (2014)"
  )
```

What you’ll see:

Each bill-length value sits exactly on the x-axis, but points are offset in the y-direction to avoid overplotting.

Compared to jitter, the beeswarm layout more clearly shows clumps of identical values without random noise.

## 1.6 Pros and Cons of Bee-Swarm Plots

What I like:
Bee-swarms neatly pack every identical bill-length value so you can see the exact counts without any random jitter—no guessing how many points are hiding underneath.

What bugs me:
If you have a ton of duplicate measurements, the swarm can balloon or get squeezed, making it hard to compare across species (and it doesn’t scale as gracefully to really large data sets).

## 1.7 Violin Plot with Boxes
Here we layer a violin plot (to show the full bill‐length distribution for each species) with a skinny box plot (to highlight the median and interquartile range).

```{r}
#| label: violin-box
#| message: false

penguins_clean %>%
  ggplot(aes(
    x = bill_length_mm,
    y = species
  )) +
  geom_violin(
    fill  = "lightblue", # soft fill to show density
    color = "steelblue" # outline color
  ) +
  geom_boxplot(
    width = 0.2, # narrow box inside the violin
    fill  = "white", # white box so the violin shows through
    color = "black" # box outline
  ) +
  labs(
    x       = "Bill Length (mm)",
    y       = "Penguin Species",
    title   = "Distribution of Penguin Bill Lengths by Species",
    caption = "Source: Gorman et al. (2014)"
  )
```
What this shows:

Violins: the full shape of each species’ bill‐length distribution (thicker regions mean more penguins at that length).

Boxes: the median line and interquartile range, giving a quick summary of center and spread.

From this, you can see that Adélie bill lengths are tightly clustered, while Gentoo and Chinstrap show wider variation.

## 1.8 What Does a Violin Plot Add to a Box Plot?

A boxplot tells me the “what” (median, IQR, outliers) but hides the “how” of the distribution. A violin plot actually shows me where the data piles up or thins out—any bumps, extra peaks, long tails, or skew—so I get a real sense of the full shape instead of just a summary.

In short, the violin turns the “skeleton” summary of a boxplot into a “flesh-and-blood” portrait of your data’s actual shape.

## 1.9 Frequency Polygons with Rug Plot

Next, let’s overlay the three species’ bill‐length distributions in one plot using frequency polygons, and add a colored rug along the bottom to show every individual measurement.

```{r}
#| label: freqpoly-rug
#| message: false

penguins_clean %>%
  ggplot(aes(
    x     = bill_length_mm,
    color = species
  )) +
  geom_freqpoly(
    binwidth = 1, # 1 mm bins
    linewidth     = 1 # slightly thicker lines
  ) +
  geom_rug(
    aes(color = species),
    sides = "b", # draw ticks only on bottom
    alpha = 0.5 # semi‐transparent so overlaps darken
  ) +
  labs(
    x       = "Bill Length (mm)",
    y       = "Count",
    color   = "Species",
    title   = "Bill Length Distributions by Species",
    caption = "Source: Gorman et al. (2014)"
  )
```

What this shows:

Each colored line traces the count of penguins in 1 mm bins for that species.

The rug ticks at the bottom mark every individual bird’s bill length (darker areas where many overlap).

You can quickly compare that Adélie have shorter bills on average, while Gentoo and Chinstrap extend to larger lengths.

## 1.10 Faceted Frequency Polygons with Rug Plots

Here I split the bill‐length frequency polygons into three separate panels—one per species—and tack a colored rug underneath each to show every individual measurement.

```{r}
#| label: freqpoly-faceted
#| message: false

penguins_clean %>%
  ggplot(aes(x = bill_length_mm)) +
  # draw a frequency polygon for each species
  geom_freqpoly(
    aes(color = species),
    binwidth = 1,
    linewidth = 1
  ) +
  # add a semi‐transparent rug at the bottom of each panel
  geom_rug(
    aes(color = species),
    sides = "b",
    alpha = 0.5
  ) +
  # facet into one panel per species
  facet_wrap(
    vars(species),
    ncol = 1
  ) +
  # labels and title
  labs(
    x       = "Bill Length (mm)",
    y       = "Count",
    color   = "Species",
    title   = "Faceted Bill Length Distributions of Penguin Species",
    caption = "Source: Gorman et al. (2014)"
  )
```

Why this helps:

Each species lives in its own panel, so the lines and rugs don’t overlap across species—much easier to see each distribution’s shape.

The rug ticks still show raw data points, so you can spot gaps or clustering that the polygon alone might smooth over.

## 1.11 Pros and Cons of Faceting

Strength: Faceting gives each species its own panel, so there’s zero overlap between the curves and rugs—you can really focus on the shape of each distribution without any visual clutter.

Weakness: It eats up a lot of space and forces you to jump between panels if you want to compare species directly, making cross-species comparisons less immediate than when everything’s overlaid in one plot.

## 1.12 Pairwise 𝑡-Test
To back up our visual impression with statistics, we’ll:

Compute the mean bill length for each species.

Run a pairwise 𝑡-test on bill length by species and report the p-values.

```{r}
#| label: mean-bill-length
#| message: false

library(dplyr)

# 1. Calculate mean bill length per species
penguins_clean %>%
  group_by(species) %>%
  summarize(
    mean_bill_length_mm = mean(bill_length_mm),
    .groups = "drop"
  )
```
Interpretation. On average, Adelie bills are about 38.8 mm, Chinstrap bills about 48.8 mm, and Gentoo bills about 47.5 mm.

```{r}
#| label: pairwise-t-test
#| message: false

# 2. Pairwise t-tests (no p-value adjustment)
pairwise.t.test(
  x = penguins_clean$bill_length_mm,
  g = penguins_clean$species,
  p.adjust.method = "none"
)
```
| Comparison          | p-value     | Significance               |
| ------------------- | ----------- | -------------------------- |
| Adelie vs Chinstrap | < 2 × 10⁻¹⁶ | **p** ≪ 0.05 → significant |
| Adelie vs Gentoo    | < 2 × 10⁻¹⁶ | **p** ≪ 0.05 → significant |
| Chinstrap vs Gentoo | 0.0032      | **p** < 0.05 → significant |

In plain terms:

Adélie penguins have significantly shorter bills than both Chinstraps and Gentoos.

Chinstrap bills are also significantly shorter than Gentoo bills.

So all three species differ from one another in mean bill length at the 5% level.

# 2 Find a Data Set to Demonstrate Mitigation of Overplotting

## 2.1 Source and Description

I’m using the `mpg` data set from the **ggplot2** package  
(hosted on Rdatasets GitHub):  
<https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv>  

This is a fuel‐economy data set of 234 vehicles (model years 1999–2008), with one row per model.  
Key columns include:

- `displ` (engine displacement, in litres)  
- `hwy` (highway mpg)  
- `cty` (city mpg)  
- `class` (vehicle class, e.g. “compact”, “suv”)  

## 2.2 Validation of Conditions C, D, and E

```{r}
#| label: import-mpg
#| message: false

mpg_raw <- read_csv(
  "https://vincentarelbundock.github.io/Rdatasets/csv/ggplot2/mpg.csv"
)

# C: 20–500 rows?
nrow(mpg_raw)
#> [1] 234

# D: at least two quantitative variables?
mpg_raw %>%
  select(displ, hwy, cty) %>%
  map_chr(class)
#>   displ     hwy     cty
#> "numeric" "numeric" "numeric"

# E: at least one exact duplicate in a pair?
#    e.g. identical displacement/highway mpg
mpg_raw %>%
  count(displ, hwy) %>%
  filter(n > 1)
```

## 2.3 Basic Scatter Plot

```{r}
#| label: basic-scatter
ggplot(mpg_raw, aes(displ, hwy)) +
  geom_point(alpha = .6) +
  labs(
    x = "Engine displacement (L)",
    y = "Highway mpg",
    title = "Scatter of displacement vs highway fuel economy"
  )
```

## 2.4 Mitigating Overplotting

### a) Jitter + transparency
```{r}
#| label: scatter-jitter
ggplot(mpg_raw, aes(displ, hwy)) +
  geom_jitter(width = .1, height = .1, alpha = .4) +
  labs(
    x = "Displacement (L)",
    y = "Highway mpg",
    title = "Jittered points (α = 0.4)"
  )
```
Advantage: reveals clustered points by spreading them slightly

Disadvantage: can mislead exact position & adds random noise

### b) Point area counts via geom_count()

```{r}
#| label: scatter-count
ggplot(mpg_raw, aes(displ, hwy)) +
  geom_count(alpha = .5) +
  scale_size_area(max_size = 6) +
  labs(
    x = "Displacement (L)",
    y = "Highway mpg",
    size = "Count",
    title = "Point area proportional to number of overlapping observations"
  )
```

Advantage: each symbol still sits exactly at true coords, area encodes multiplicity

Disadvantage: nearby counts may still overlap; harder to read small circles

## 2.5 Smoothing Trends

### a) LOESS smoother

```{r}
#| label: smooth-loess
ggplot(mpg_raw, aes(displ, hwy)) +
  geom_point(alpha = .3) +
  geom_smooth(method = "loess", se = FALSE) +
  labs(
    x = "Displacement (L)",
    y = "Highway mpg",
    title = "LOESS fit (no CI)"
  )
```

Strength: flexibly captures non‐linear trends

Weakness: may over‐fit in sparse regions

### b) Linear model

```{r}
#| label: smooth-lm
ggplot(mpg_raw, aes(displ, hwy)) +
  geom_point(alpha = .3) +
  geom_smooth(method = "lm", se = FALSE, color = "darkred") +
  labs(
    x = "Displacement (L)",
    y = "Highway mpg",
    title = "Linear regression trend"
  )
```

Strength: simple, easy to interpret slope & intercept

Weakness: imposes straight‐line fit, misses curvature

# 3 Reflections
